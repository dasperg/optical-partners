<div id="partners-app" class="inner-wrapper op-wrapper">
  <div class="partner-banner partner-banner-overview">
    <h1>{'OP_HEADING_TITLE'|tr}</h1>
    <p>{'OP_HEADING_DESCRIPTION'|tr}</p>
  </div>

{if $stores|count > 0}
  <ol class="partner-breadcrumb divider-header" vocab="http://schema.org/" typeof="BreadcrumbList">           
    <li property="itemListElement" typeof="ListItem">
      <span property="name">{'OP_BREADCRUMB_START'|tr}</span>
      <meta property="position" content="1">
    </li>
  </ol>

  <div class="map-wrapper">
    {* Map generated by javascript *}
    <div class="map" id="map"></div>
    <div class="partners-overview">
      <div class="partners-search partners-content">
        <form id="search_map_form" action="" @submit.prevent="geocodeAddress()">
          <input type="search" id="search_map" v-model="searchMap" placeholder="{'OP_OVERVIEW_SEARCH'|tr}">
          <button type="submit"><i class="svg-search svg-search-dims"></i></button>
        </form>
      </div>

      {* List of the partners *}
      <section id="partners_list" class="partners-list partners-content">
        <div class="partners-list-wrap">
          {* Vue.js Javascript foreach partners *}
          <article v-for="(store, key) in stores"
            :id="'store_' + store.op_partner_id" 
            :class="{
              'active': store.active
            }" 
            @click="showPartnerInfoWindow(store, true)">
            <h3><strong v-text="store.name"></strong></h3>
            <p class="muted-address"><%store.street%>, <%store.zip%> <%store.city%></p>
            <div class="hidden-content">
              <ul class="m-t-sm">
                <li><i class="svg-pin-slim-orange svg-pin-slim-orange-dims"></i> <%store.street%>, <%store.zip%> <%store.city%></li>
                <li v-if="store.has_phone_contact">
                  <i class="svg-phone svg-phone-dims"></i>
                  <span v-html="store.formatted_phones"></span>
                </li>
                <li v-if="store.has_email_contact">
                  <i class="svg-mail svg-mail-dims"></i>
                  <span v-html="store.formatted_emails"></span>
                </li>
                <li v-if="store.has_opening_hours">
                  <i class="svg-opening-hours-clock svg-opening-hours-clock-dims"></i> {'OP_HOUR_GENERAL'|tr}
                  <table class="opening-hours">
                    <tbody>
                      <tr v-for="(dayHours, dayName, index) in store.formatted_opening_hours">
                        <td><strong v-text="dayName"></strong></td>
                        <td v-html="dayHours"></td>
                      </tr>
                    </tbody>
                  </table>
                </li>
              </ul>

              <a :href="'/optical_partner_detail.php?partner=' + store.op_partners_id + '&store=' + store.id + '#/booking'" class="button button-primary float-right">{'OP_GOTO_STORE'|tr}</a>
              <div class="clear"></div>
            </div>
          </article>
          {* End - Vue.js Javascript foreach partners *}
        </div>
      </section>
    </div>
  </div>
</div>

<script src="https://cdnjs.cloudflare.com/ajax/libs/vue/2.4.4/vue.js"></script>
<script>
Vue.options.delimiters = ['<%', '%>'];

var partnersListing = new Vue({
  el: '#partners-app',
  data: {
    partners: {json_encode($stores)},
    searchPartner: '',
    map: '',
    infoWindow: '',
    searchMap: '',
    geocoder: '',
    autocomplete: '',
    defaultMapPosition: {
      lat: 47.1610821,
      lng: 8.4410803
    },
    markerCluster: ''
  },
  computed: {

    // List of Markers generated from partners property
    markers: function() {
      var array = [];
      $.each(this.partners, function(key, partner) {
        array.push(partner.marker);
      });

      return array;
    },

    stores: function() {
      var self = this;
      var stores = new Object(self.partners);

      $.each(stores, function(key, store) {
        var storeContactEmail = false;
        var storeContactPhone = false;
        var storeEmails = '';
        var storePhones = '';

        // Check if store has at least one email or phone contact and save it to properties: has_email_contact, has_phone_contact
        // Fill only with one value

        $.each(store.contacts, function(key, contact) {
          
          if(contact.private == "0") {
            if (contact.email.length > 0) {
              storeContactEmail = true;
              if(storeEmails == '') {
                storeEmails += '<br>' + contact.email;
              }
            }

            if (contact.phone.length > 0) {
              storeContactPhone = true;
              if(storePhones == '') {
                storePhones += '<br>' + contact.phone;
              }
            }
          }
        });

        var openingHoursObject = {};

        // Check if store has opening hours and create new structure of a opening hours
        $.each(store.hours.regular, function(key, day) {
          var currentDayOpeningHours = '';
          
          $.each(day, function(key, openingHours) {
            currentDayOpeningHours += '<br>' + self.getFormattedHour(openingHours.starts_at) + ' - ' + self.getFormattedHour(openingHours.ends_at);
          });

          openingHoursObject[self.getDayName(key)] = currentDayOpeningHours.substr(4)
        });


        store['formatted_opening_hours'] = openingHoursObject;
        store['has_email_contact'] = storeContactEmail;
        store['formatted_emails'] = storeEmails.substr(4);
        store['has_phone_contact'] = storeContactPhone;
        store['formatted_phones'] = storePhones.substr(4);
        store['has_opening_hours'] = Object.keys(store['formatted_opening_hours']).length > 0;
      });

      return stores;
    }

  },
  methods: {

    getFormattedHour(string) {
      return string.substr(0, string.lastIndexOf(':'))
    },

    getDayName(day) {
      switch (parseInt(day)) {
        case 1:
          var dayName = '{"OP_HOUR_DAY_1"|tr}';
          break;
        case 2:
          var dayName = '{"OP_HOUR_DAY_2"|tr}';
          break;
        case 3:
          var dayName = '{"OP_HOUR_DAY_3"|tr}';
          break;
        case 4:
          var dayName = '{"OP_HOUR_DAY_4"|tr}';
          break;
        case 5:
          var dayName = '{"OP_HOUR_DAY_5"|tr}';
          break;
        case 6:
          var dayName = '{"OP_HOUR_DAY_6"|tr}';
          break;
        case 7:
          var dayName = '{"OP_HOUR_DAY_7"|tr}';
          break;
      }

      return dayName;
    },

    // Active partner has shown full details in the partners list
    setActivePartner: function(partner) {
      $.each(this.partners, function(key, partner) {
        partner.active = false;
      });
      partner.active = true;
    },

    setAllPartnersInactive: function(partner) {
      $.each(this.partners, function(key, partner) {
        partner.active = false;
      });
      
      this.infoWindow.close();
    },

    // InfoWindow is white popup window in the map with the name and some information about the currently selected partner
    showPartnerInfoWindow: function(partner, partnerListingClick) {
      var partnerListingClick = typeof partnerListingClick == 'undefined' ? false : partnerListingClick;
      this.setActivePartner(partner);

      if (window.innerWidth > 768) {
        this.listScrollToPartner(partner);

        if (partnerListingClick) {
          this.setMapToMarker(partner);
        }

        // Google Maps Api
        setTimeout(function() {
          this.infoWindow.setContent(partner.markerInfo);
          this.infoWindow.open(this.map, partner.marker);
        }.bind(this), 300);
      }
    },

    // Scroll list to the currently active (selected) partner
    listScrollToPartner: function(partner) {
      setTimeout(function() {

        var partnerElement = document.getElementById('store_' + partner.op_partner_id);
        var partnersList = document.getElementById('partners_list');
        // partnersList.scrollTop = partnerElement.offsetTop - partnersList.offsetTop;

        $('#partners_list').animate({
          scrollTop: (partnerElement.offsetTop - partnersList.offsetTop)
        }, 500);
      }, 550)
    },

    // Set map to a Partner's coords
    setMapToMarker: function(partner) {
      this.map.setZoom(16);
      this.map.setCenter(partner.marker.getPosition());
    },

    // Autocomplete search. Allowed search is only for address
    geocodeAddress: function() {
      var self = this;

      this.setAllPartnersInactive();

      this.geocoder.geocode({
        'address': self.searchMap
      }, function(results, status) {
        if (status === 'OK') {
          self.map.setCenter(results[0].geometry.location);
        }
      });
    },

    // Set map to current location
    setMapToCurrentLocation: function() {
      navigator.geolocation.getCurrentPosition(function(position) {
        this.map.setCenter({
          lat: position.coords.latitude,
          lng: position.coords.longitude
        });
      }.bind(this));
    }

  },
  watch: {
    
  }
})

// On resize init map once again
$(window).resize(function() {
  initMap();
});

// This function is calls a Google and it creates a map
function initMap() {
  if (window.innerWidth > 768) {
    // Default settings for map
    // center property is saved inside Vue object (variable: partnersListing), property defaultMapPosition
    partnersListing.map = new google.maps.Map(document.getElementById('map'), {
      zoom: 10,
      center: partnersListing.defaultMapPosition,
      mapTypeId: 'roadmap',
      mapTypeControl: false,
      fullscreenControl: false,
      streetViewControl: false,
      rotateControl: false
    });

      // Initialize InfoWindow and define it's max width to 300
      // save it to Vue.js object (variable: partnersListing), property infoWindow
      partnersListing.infoWindow = new google.maps.InfoWindow({
        maxWidth: 300
      });
      
      // Initialize geocoder (Search)
      partnersListing.geocoder = new google.maps.Geocoder();
      
      // Initialzie Autocomplete (Search) and save it to Vue.js object (variable: partnersListing), property autocomplete
      partnersListing.autocomplete = new google.maps.places.Autocomplete(document.getElementById('search_map'));
      partnersListing.autocomplete.bindTo('bounds', partnersListing.map);

    // Set map to Current Position. method is defined inside Vue.js object (variable: partnersListing), property methods
    partnersListing.setMapToCurrentLocation();

    // Partners Listing Event Listener on place change (Submit autocomplete (search) on clicking on results will fire the event)
    partnersListing.autocomplete.addListener('place_changed', function() {
      var place = this.getPlace();
      if (!place.geometry) {
        return;
      }

      // If the place has a geometry (exists), then present it on a map.
      if (place.geometry.viewport) {
        partnersListing.map.fitBounds(place.geometry.viewport);
      } else {
        partnersListing.map.setCenter(place.geometry.location);
      }

      // Autocomplete Setting. It shows up to 5 results for searched term.
      var address = '';
      if (place.address_components) {
        address = [
          (place.address_components[0] && place.address_components[0].short_name || ''),
          (place.address_components[1] && place.address_components[1].short_name || ''),
          (place.address_components[2] && place.address_components[2].short_name || ''),
          (place.address_components[3] && place.address_components[2].short_name || ''),
          (place.address_components[4] && place.address_components[2].short_name || '')
        ].join(' ');
      }
    });

    // Show Markers on Map
    // For each of the partner do following:
    $.each(partnersListing.partners, function(key, partner) {
    // partnersListing.partners.forEach(function(partner, key) {

      // Save partner position to variable
      var position = {
        lat: parseFloat(partner.location[0]),
        lng: parseFloat(partner.location[1])
      };

      // Create partner marker info (InfoWindow)
      partnersListing.partners[key].markerInfo = '<div class="popup-partner-details"><h3>' + partner.name + '</h3><p>' + partner.street + ', ' + partner.zip + ' ' + partner.city + '</p><a href="/optical_partner_detail.php?partner=' + partner.op_partners_id + '&store=' + partner.id + '#/booking">{"OP_GOTO_STORE"|tr}</a></div>';

      // Add marker element to specific partner property (marker) in partnersListing variable (vue object)
      // Set position
      // Set marker icon
      // Set map to which marker is supposed to be related
      // Set title of the partner
      partnersListing.partners[key].marker = new google.maps.Marker({
        position: position,
        icon: '/templates/mrlens2/img/svg/map_pin.svg',
        map: partnersListing.map,
        title: partner.name
      });
      
      // Add event listener on click to each partner marker.
      // On click it will show partner infoWindow
      partnersListing.partners[key].marker.addListener('click', function() {
        partnersListing.showPartnerInfoWindow(partnersListing.partners[key]);
      });
    });

    // Set MarkerClusterer save it inside inside Vue.js object (variable: partnersListing), property markerCluster
    // Optimalziation for lot of markers. It will merge them into one group
    partnersListing.markerCluster = new MarkerClusterer(partnersListing.map, partnersListing.markers, {
      imagePath: 'https://developers.google.com/maps/documentation/javascript/examples/markerclusterer/m'
    });
  }
}
</script>

<script src="https://developers.google.com/maps/documentation/javascript/examples/markerclusterer/markerclusterer.js"></script>
<script async defer src="https://maps.googleapis.com/maps/api/js?key=AIzaSyDp7Wx3zYcirrHbHJ55bP9Nco7d1wkf4AI&libraries=places&callback=initMap"></script>
<!-- <script async defer src="https://maps.googleapis.com/maps/api/js?key=AIzaSyBSXtqFuUZI4cIUg7GymFUkM7iPpSR4pgg&libraries=places&callback=initMap"></script> -->
{else}
  <div class="message_stack-warning">
    <p>{'OP_NO_STORES_FOUND'|tr}</p>
  </div>
{/if}